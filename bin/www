#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled1:server');
var http = require('http');
var uuid = require('node-uuid');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);


var sockets = {};
var players = {};

io.on('connection', function (socket) {
    socket.userid = uuid();
    console.log("socket connected with id: " + socket.userid);
    sockets[socket.userid] = socket;
    socket.emit('onconnected', { userid: socket.userid });
    socket.on('requestToJoinRoom', function (data) {
        var player = joinRoom(socket);
        socket.emit("onJoinedRoom", {userid: player.userid, players: players});
        socket.broadcast.emit("onNewPlayer", {player: player});
    });

    socket.on('disconnect', function() {
        console.log('socket disconnected with id: " + socket.userid');
        delete sockets[socket.userid];
        delete players[socket.userid];
        socket.broadcast.emit("ondisconnect", {userid: socket.userid});
    });

    socket.on('updatePosition', function(data) {
        //console.log("updatePosition", data);
        var player = players[data.userid];
        player.x = data.x;
        player.y = data.y;
        socket.broadcast.emit("playerMoved", {player:player});
    });
});


var joinRoom = function(socket) {
    var player = {};
    player.userid = socket.userid;
    player.x = Math.random() * 200 + 400;
    player.y = Math.random() * 200 + 300;
    players[player.userid] = player;
    return player;
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
